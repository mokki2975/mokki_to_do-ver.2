
services:
  db:
    image: postgres:16-alpine 
    volumes:
      - postgres_data:/var/lib/postgresql/data # データベースの永続化
    environment:
      POSTGRES_DB: tododb # データベース名
      POSTGRES_USER: user # データベースユーザー名
      POSTGRES_PASSWORD: testpass123 # データベースパスワード
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
    ports:
      - "5432:5432" # ホストの5432ポートをコンテナの5432ポートにマッピング

    healthcheck: # dbサービスのヘルスチェックを設定
      test: ["CMD-SHELL", "pg_isready -U user -d tododb"] # userユーザーでtododbに接続できるかチェック
      interval: 5s # 5秒ごとにチェック
      timeout: 5s # 5秒でタイムアウト
      retries: 5 # 5回リトライ
      start_period: 10s # 起動後10秒間はエラーを無視 (db起動に時間がかかるため)

  web:
    build: . # カレントディレクトリのDockerfileを使ってイメージをビルド
    ports:
      - "5000:5000" # Flaskアプリのポートマッピング
    volumes:
      - .:/app # ホストのコードをコンテナにマウント（開発時変更を即反映）
    environment:
      FLASK_APP: app # Flaskアプリケーションのエントリポイント
      FLASK_ENV: development # 開発環境であることを示す
      DATABASE_URL: postgresql://user:testpass123@db:5432/tododb # PostgreSQLへの接続URL
      SECRET_KEY: my_secret_key # FlaskのSECRET_KEYを設定（__init__.pyと揃える）
    depends_on:
      db: # ここはサービス名をキーとした辞書形式になります
        condition: service_healthy
    command: >
      sh -c "flask run --host=0.0.0.0" # アプリ起動コマンド

volumes:
  postgres_data: # データベースの永続化用ボリューム